/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import com.microsoft.sqlserver.jdbc.StringUtils;
import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Film;
import hr.algebra.model.FilmArchive;
import hr.algebra.model.Person;
import hr.algebra.model.PersonTransferable;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.FilmTableModel;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.swing.text.JTextComponent;
import javax.xml.bind.JAXBException;

/**
 *
 * @author lorenababic
 */
public class FilmPanel extends javax.swing.JPanel {
    
    private static final String FILM_PANEL = "Film";
    
    private Repository repository;
    private FilmTableModel filmTableModel;
    
    private List<Person> actors;
    private List<Person> directors;
    private Set<Person> cast = new HashSet<>();
    
    private final DefaultListModel<Person> actorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> directorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> castModel = new DefaultListModel<>();    
    
    private Film selectedFilm;    
    private static final String FILE_PATH = "src/main/resources/filmarchive.xml";
    private static final String DIRECTORY = "assets";
    
    
    private List<Film> films = new ArrayList<>();
    private Set<Person> ActorsInFilm = new HashSet<>();
    private Set<Person> DirectorsInFilm = new HashSet<>();
    private Set<Person> CastInFilm = new HashSet<>();

    /**
     * Creates new form FilmPanel
     */
    public FilmPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsCast = new javax.swing.JList<>();
        lbPicture = new javax.swing.JLabel();
        tfPicturePath = new javax.swing.JTextField();
        btnChoose = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSaveXML = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbFilms = new javax.swing.JTable();
        lbTitleError = new javax.swing.JLabel();
        lbPublishedDateError = new javax.swing.JLabel();
        lbDurationError = new javax.swing.JLabel();
        lbDescriptionError = new javax.swing.JLabel();
        lbPicturePathError = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Title:");

        jLabel2.setText("Duration:");

        jLabel3.setText("Published Date:");

        jLabel4.setText("Description:");

        taDescription.setColumns(20);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        jScrollPane2.setViewportView(lsActors);

        jLabel5.setText("Actors:");

        jLabel6.setText("Directors:");

        jScrollPane3.setViewportView(lsDirectors);

        jLabel7.setText("Cast:");

        jScrollPane4.setViewportView(lsCast);

        lbPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSaveXML.setText("Save XML");
        btnSaveXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveXMLActionPerformed(evt);
            }
        });

        tbFilms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbFilms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbFilmsMouseClicked(evt);
            }
        });
        tbFilms.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbFilmsKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(tbFilms);

        lbTitleError.setForeground(new java.awt.Color(255, 0, 0));
        lbTitleError.setText("X");

        lbPublishedDateError.setForeground(new java.awt.Color(255, 0, 0));
        lbPublishedDateError.setText("X");

        lbDurationError.setForeground(new java.awt.Color(255, 0, 0));
        lbDurationError.setText("X");

        lbDescriptionError.setForeground(new java.awt.Color(255, 0, 0));
        lbDescriptionError.setText("X");

        lbPicturePathError.setForeground(new java.awt.Color(255, 0, 0));
        lbPicturePathError.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addComponent(lbPicturePathError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(111, 111, 111)
                                    .addComponent(tfPublishedDate))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(59, 59, 59))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(18, 18, 18)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(tfTitle)
                                        .addComponent(tfDuration, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(13, 13, 13)
                                    .addComponent(lbTitleError))
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lbDurationError)
                                        .addComponent(lbPublishedDateError)))
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lbDescriptionError)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(40, 40, 40)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(36, 36, 36)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(62, 62, 62)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(btnSaveXML, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jLabel7)))
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(lbTitleError))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbPublishedDateError))))
                            .addComponent(lbDurationError))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbDescriptionError)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btnSaveXML, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPicture))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnChoose)
                        .addComponent(lbPicturePathError))
                    .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if(!formValid()) {
            return;
        }
        
        try {
            String localPicturePath = uploadPicture();
            Film film = new Film(
                    tfTitle.getText().trim(),
                    Integer.parseInt(tfDuration.getText().trim()),
                    LocalDate.parse(
                            tfPublishedDate.getText().trim(), Film.DATE_FORMATTER),
                    taDescription.getText().trim(),
                    localPicturePath
            );
            
            repository.createFilm(film);
            
            filmTableModel.setFilms(repository.selectFilms());
            
            clearForm();
        }
        catch(Exception ex) {
            Logger.getLogger(FilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(FILM_PANEL, "Error while creating film");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if(selectedFilm == null) {
            MessageUtils.showErrorMessage(FILM_PANEL, "Error, choose film");
            return;
        }
        
        if(!formValid()){
            return;
        }
        
        try {
            if (!tfPicturePath.getText().equals(selectedFilm.getPicturePath())) {
                if (selectedFilm.getPicturePath() != null) {
                    Files.deleteIfExists(
                            Paths.get(selectedFilm.getPicturePath())
                    );
                }
                String picturePath = uploadPicture();
                selectedFilm.setPicturePath(picturePath);
            }

            selectedFilm.setTitle(tfTitle.getText().trim());
           
            selectedFilm.setDuration(
                    Integer.parseInt(tfDuration.getText().trim()));            

            selectedFilm.setPublishedDate(LocalDate.parse(
                    tfPublishedDate.getText().trim(),
                    Film.DATE_FORMATTER));

            selectedFilm.setDescription(taDescription.getText().trim());

            repository.updateFilm(selectedFilm.getId(), selectedFilm);
            filmTableModel.setFilms(repository.selectFilms());

            updateCast();

            clearForm();
            MessageUtils.showInformationMessage(FILM_PANEL, "Film has been succesfully updated");
        } catch (Exception ex) {
            Logger.getLogger(FilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(FILM_PANEL, "Error while updating film");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (selectedFilm == null) {
            MessageUtils.showErrorMessage(FILM_PANEL, "Error, choose film");
            return;
        }

        if (!formValid()) {
            return;
        } 
        
        try {
        if (MessageUtils.showConfirmDialog("Delete film", "Are you sure you want to delete this film?")) {
            if (selectedFilm.getPicturePath() != null) {
                try {
                    Files.deleteIfExists(
                            Paths.get(selectedFilm.getPicturePath()));

                    repository.deleteCast(selectedFilm.getId());
                    repository.deleteFilm(selectedFilm.getId());
                    filmTableModel.setFilms(repository.selectFilms());

                    clearForm();
            MessageUtils.showInformationMessage(FILM_PANEL, "Film has been succesfully deleted");
                } catch (IOException ex) {
                    Logger.getLogger(FilmPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }            
        } catch (Exception ex) {
            Logger.getLogger(FilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(FILM_PANEL, "Error while deleting film");
            
        }        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveXMLActionPerformed
        // TODO add your handling code here:
        try {

            for (Person person : cast) {
                if (person.getRole().name().equals("ACTOR")) {
                    ActorsInFilm.add(person);
                } else {
                    DirectorsInFilm.add(person);
                }
            }

            FilmArchive filmArchive = new FilmArchive(films);

            Film xmlDownloadFilm = new Film(
                    selectedFilm.getId(),
                    selectedFilm.getTitle(),
                    selectedFilm.getDuration(),
                    selectedFilm.getPublishedDate(),
                    selectedFilm.getDescription(),
                    selectedFilm.getPicturePath()
            );

            films.add(xmlDownloadFilm);

            JAXBUtils.save(filmArchive, FILE_PATH);
            MessageUtils.showInformationMessage(FILM_PANEL, "Film has been succesfully saved as XML");

        } catch (JAXBException ex) {
            Logger.getLogger(FilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(FILM_PANEL, "Error while saving film");
            
        }        
    }//GEN-LAST:event_btnSaveXMLActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        // TODO add your handling code here:
        Optional<File> optFile = FileUtils.uploadFile("Images", "png", "jpeg", "jpg");

        if (!optFile.isPresent()) {
            return;
        }

        File file = optFile.get();

        tfPicturePath.setText(file.getAbsolutePath());
        setIcon(lbPicture, file);        
    }//GEN-LAST:event_btnChooseActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        init();
        clearForm();        
    }//GEN-LAST:event_formComponentShown

    private void tbFilmsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFilmsMouseClicked
        // TODO add your handling code here:
        showFilm();
    }//GEN-LAST:event_tbFilmsMouseClicked

    private void tbFilmsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbFilmsKeyReleased
        // TODO add your handling code here:
        showFilm();
    }//GEN-LAST:event_tbFilmsKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSaveXML;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbPicture;
    private javax.swing.JLabel lbPicturePathError;
    private javax.swing.JLabel lbPublishedDateError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<Person> lsCast;
    private javax.swing.JList<Person> lsDirectors;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbFilms;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private Map<JTextComponent, JLabel> validationMap = new HashMap<>();
    
    
    private boolean formValid() {
        hideErrors();
        boolean ok = true;

        for (Map.Entry<JTextComponent, JLabel> map : validationMap.entrySet()) {
            JTextComponent field = map.getKey();
            JLabel error = map.getValue();

            boolean fieldEmpty = field.getText().trim().isEmpty();
            ok &= !fieldEmpty;
            error.setVisible(fieldEmpty);

            if ("Date".equals(field.getName())) {
                try {
                    LocalDate.parse(field.getText().trim(), Film.DATE_FORMATTER);
                } catch (Exception e) {
                    ok = false;
                    error.setVisible(true);
                }
            }
        }

        /* if (lsCast.getModel().getSize() == 0) {
        lbCastError.setVisible(true);
        ok = false;
        }*/

        if (!StringUtils.isNumeric(tfDuration.getText())) {
            lbDurationError.setVisible(true);
            ok = false;
        }
        return ok;    
    }

    private String uploadPicture() throws IOException {
        String picturePath = tfPicturePath.getText();

        String ext = picturePath.substring(
                picturePath.lastIndexOf("."));

        String pictureName = UUID.randomUUID() + ext;

        String localPath = DIRECTORY + File.separator + pictureName;
        FileUtils.copy(picturePath, localPath);

        return localPath;    
    }

    private void clearForm() {
        hideErrors();
        validationMap.forEach((field, error) -> field.setText(""));
        lbPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N
        clearCast();
        selectedFilm = null;    }

    private void updateCast() throws Exception {
        repository.deleteCast(selectedFilm.getId());
        repository.createCastAll(selectedFilm.getId(), cast);
    }

    private void init() {
        initValidation();
        initRepository();
        hideErrors();
        loadLists();
        initTable();
        initDragNDrop();
    }

    private void showFilm() {
        try {
            clearForm();

            int selectedRow = tbFilms.getSelectedRow();
            int rowIndex = tbFilms.convertRowIndexToModel(selectedRow);
            int filmId = (int) filmTableModel.getValueAt(rowIndex, 0);

            Optional<Film> optFilm = repository.selectFilm(filmId);
            if (optFilm.isPresent()) {
                selectedFilm = optFilm.get();
                fillForm(selectedFilm);
                fillLsCast(filmId);
            }
        } catch (Exception ex) {
            Logger.getLogger(FilmPanel.class.getName()).log(Level.SEVERE, null, ex);
        }    
    }

    private void initValidation() {
        validationMap.put(tfTitle, lbTitleError);
        validationMap.put(tfDuration, lbDurationError);        
        validationMap.put(tfPublishedDate, lbPublishedDateError);
        validationMap.put(taDescription, lbDescriptionError);
        validationMap.put(tfPicturePath, lbPicturePathError);    }

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

    private void hideErrors() {
        validationMap.forEach((field, error) -> error.setVisible(false));
    /*        lbCastError.setVisible(false);    */    
    }

    private void loadLists() {
        loadActors();
        loadDirectors();
    }

    private void initTable() {
        try {
            tbFilms.setRowHeight(25);
            tbFilms.setAutoCreateRowSorter(true);
            tbFilms.setSelectionMode(
                    ListSelectionModel.SINGLE_INTERVAL_SELECTION);

            filmTableModel = new FilmTableModel(
                    repository.selectFilms());

            tbFilms.setModel(filmTableModel);
        } catch (Exception ex) {
            Logger.getLogger(FilmPanel.class.getName()).log(Level.SEVERE, null, ex);
        }    }

    private void initDragNDrop() {
        lsActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsActors.setDragEnabled(true);
        lsActors.setTransferHandler(new ExportActorsHandler());

        lsDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsDirectors.setDragEnabled(true);
        lsDirectors.setTransferHandler(new ExportDirectorsHandler());

        lsCast.setDropMode(DropMode.ON);
        lsCast.setTransferHandler(new ImportTransferHandler());        
    }

    private void clearCast() {
        castModel.clear();
        cast.clear();
    }

    private void setIcon(JLabel label, File imageFile) {
        try {
            label.setIcon(IconUtils.createIcon(imageFile, label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(FilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(FILM_PANEL, "Error while setting picture");
        }
    }    

    private void loadActors() {
        try {
            actorsModel.clear();

            actors = repository.selectActors();

            for (Person actor : actors) {
                actorsModel.addElement(actor);
            }

            lsActors.setModel(actorsModel);
        } catch (Exception ex) {
            Logger.getLogger(FilmPanel.class.getName()).log(Level.SEVERE, null, ex);
        }    
    }

    private void loadDirectors() {
        try {
            directorsModel.clear();

            directors = repository.selectDirectors();

            for (Person director : directors) {
                directorsModel.addElement(director);
            }

            lsDirectors.setModel(directorsModel);
        } catch (Exception ex) {
            Logger.getLogger(FilmPanel.class.getName()).log(Level.SEVERE, null, ex);
        }    
    }

    private void fillForm(Film film) {
        tfTitle.setText(film.getTitle());
        tfPublishedDate.setText(film.getPublishedDate()
                .format(Film.DATE_FORMATTER));

        taDescription.setText(film.getDescription());
        tfDuration.setText(String.valueOf(film.getDuration()));

        if (film.getPicturePath() != null && Files.exists(Paths.get(film.getPicturePath()))) {
            tfPicturePath.setText(film.getPicturePath());
            setIcon(lbPicture, new File(film.getPicturePath()));
        }    
    }

    private void fillLsCast(int filmId) throws Exception {
        cast = repository.selectCast(filmId);
        loadCast();
    }

    private void loadCast() {
        castModel.clear();
        cast.forEach(castModel::addElement);
        lsCast.setModel(castModel);
    }

    private class ExportActorsHandler extends TransferHandler {

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsActors.getSelectedValue());
        }

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }
        
    }

    private class ExportDirectorsHandler extends TransferHandler {

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsDirectors.getSelectedValue());
        }
        
        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }        
    }

    private class ImportTransferHandler extends TransferHandler {

        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }
        
        public boolean importData(TransferSupport support) {
            try{
                Transferable transferable = support.getTransferable();
                
                Person person = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                
                if(cast.add(person)) {
                    loadCast();
                    return true;
                }
            }
            catch(IOException | UnsupportedFlavorException ex) {
                Logger.getLogger(FilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

}

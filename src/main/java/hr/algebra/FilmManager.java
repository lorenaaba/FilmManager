/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hr.algebra;

import com.formdev.flatlaf.FlatDarkLaf;
import hr.algebra.dal.login.LoginHandler;
import hr.algebra.utilities.FileUtils;
import hr.algebra.view.AdminPanel;
import hr.algebra.view.FilmPanel;
import hr.algebra.view.Login;
import hr.algebra.view.PersonPanel;
import java.awt.Component;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultEditorKit;


/**
 *
 * @author lorenababic
 */
public class FilmManager extends javax.swing.JFrame implements LoginHandler{
    
    private Optional<File> selectedFile = Optional.empty();
    private boolean edited;
    private static final String DATE_FORMAT = "hh:mm dd.MM.yyyy.";
    
    public static final String LOGIN_PANEL = "Login";
    public static final String FILM_PANEL = "Film";
    public static final String PERSON_PANEL = "Person";
    public static final String ADMIN_PANEL = "Admin";
    
    private boolean isLoggedIn = false;    
    
    

    /**
     * Creates new form FilmManager
     */
    public FilmManager() {
        initComponents();
        loadLogin();
        configurePanels();
        handleEditMenu();
        handleLookAndFeel();        
        disablePanels();
       if (!isLoggedIn) {
        disablePanels();
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpContent = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        miNew = new javax.swing.JMenuItem();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        miSaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miPageSetup = new javax.swing.JMenuItem();
        miPrint = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuView = new javax.swing.JMenu();
        miLF = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tpContent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tpContentKeyReleased(evt);
            }
        });

        menuFile.setText("File");

        miNew.setText("New");
        miNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewActionPerformed(evt);
            }
        });
        menuFile.add(miNew);

        miOpen.setText("Open");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        menuFile.add(miOpen);

        miSave.setText("Save");
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        menuFile.add(miSave);

        miSaveAs.setText("SaveAs");
        miSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(miSaveAs);
        menuFile.add(jSeparator1);

        miPageSetup.setText("Page Setup");
        miPageSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPageSetupActionPerformed(evt);
            }
        });
        menuFile.add(miPageSetup);

        miPrint.setText("Print");
        miPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPrintActionPerformed(evt);
            }
        });
        menuFile.add(miPrint);
        menuFile.add(jSeparator2);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        menuFile.add(miExit);

        jMenuBar1.add(menuFile);

        menuEdit.setText("Edit");
        jMenuBar1.add(menuEdit);

        menuView.setText("View");

        miLF.setText("Look and feel");
        menuView.add(miLF);

        jMenuBar1.add(menuView);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 966, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewActionPerformed
        // TODO add your handling code here:
        if (edited) {
            miSaveAs.doClick();
        }
    tpContent.removeAll();
         selectedFile = Optional.empty();        
    edited = false;       
    }//GEN-LAST:event_miNewActionPerformed

    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
        // TODO add your handling code here:
        /*    try {
        Optional<String> optText = FileUtils.loadTextFromFile();
        if (optText.isPresent()) {
        tpContent.setText(optText.get());
        edited = false;
        selectedFile = Optional.empty();
        }
        } catch (IOException ex) {
        Logger.getLogger(FilmManager.class.getName()).log(Level.SEVERE, null, ex);
        } */      
    }//GEN-LAST:event_miOpenActionPerformed

    private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveActionPerformed
        // TODO add your handling code here:
    saveTextAreaFromSelectedTab();
        
    }//GEN-LAST:event_miSaveActionPerformed

    private void miPageSetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPageSetupActionPerformed
        // TODO add your handling code here:
        PrinterJob job = PrinterJob.getPrinterJob();
        PageFormat format = job.pageDialog(job.defaultPage());
        try {
            job.print();
        } catch (PrinterException ex) {
            Logger.getLogger(FilmManager.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_miPageSetupActionPerformed

    private void miPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPrintActionPerformed
        // TODO add your handling code here:
        PrinterJob job = PrinterJob.getPrinterJob();
        if (job.printDialog()) {
            try {
                job.print();
            } catch (PrinterException ex) {
                Logger.getLogger(FilmManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        
    }//GEN-LAST:event_miPrintActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        // TODO add your handling code here:
        if (edited) {
            miSaveAs.doClick();
        }
        dispose();
    }//GEN-LAST:event_miExitActionPerformed

    private void miSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveAsActionPerformed
        // TODO add your handling code here:
    try {
        JScrollPane scrollPane = (JScrollPane) tpContent.getSelectedComponent();
        JTextArea textArea = (JTextArea) scrollPane.getViewport().getView();

        selectedFile = FileUtils.saveTextInFile(textArea.getText(), Optional.empty());

        edited = false;
    } catch (IOException ex) {
        Logger.getLogger(FilmManager.class.getName()).log(Level.SEVERE, null, ex);
    } catch (Exception ex) {
        Logger.getLogger(FilmManager.class.getName()).log(Level.SEVERE, "No text area found in selected tab", ex);
    }        
    }//GEN-LAST:event_miSaveAsActionPerformed

    private void tpContentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tpContentKeyReleased
        // TODO add your handling code here:
        edited = true;
    }//GEN-LAST:event_tpContentKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilmManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilmManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilmManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilmManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        try{
            UIManager.setLookAndFeel(new FlatDarkLaf());
        }
        catch (UnsupportedLookAndFeelException ex) {
            System.err.println("Faild to initialize LaF");
        }
        
        java.awt.EventQueue.invokeLater(() -> {
            new FilmManager().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuView;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miLF;
    private javax.swing.JMenuItem miNew;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miPageSetup;
    private javax.swing.JMenuItem miPrint;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JMenuItem miSaveAs;
    private javax.swing.JTabbedPane tpContent;
    // End of variables declaration//GEN-END:variables

        private void configurePanels() {
        tpContent.addTab(FILM_PANEL, new FilmPanel());
        tpContent.addTab(PERSON_PANEL, new PersonPanel());
        tpContent.addTab(ADMIN_PANEL, new AdminPanel());     
    }
    
    private void loadLogin() {
        tpContent.addTab(LOGIN_PANEL, new Login(this));
    }

    @Override
    public void onUserLogin() {
        loadPanels(0);
    }

    @Override
    public void onAdminLogin() {
        loadPanels(1);
    }

    private void loadPanels(int i) {
        if(i == 0) {
        tpContent.setSelectedComponent(tpContent.getComponentAt(tpContent.indexOfTab(FILM_PANEL)));
        tpContent.setEnabledAt(tpContent.indexOfTab(PERSON_PANEL), true);
        tpContent.setEnabledAt(tpContent.indexOfTab(FILM_PANEL), true);
        }
        else if (i == 1) {
        tpContent.setSelectedComponent(tpContent.getComponentAt(tpContent.indexOfTab(ADMIN_PANEL)));
        tpContent.setEnabledAt(tpContent.indexOfTab(ADMIN_PANEL), true);
        tpContent.setEnabledAt(tpContent.indexOfTab(PERSON_PANEL), true);
        tpContent.setEnabledAt(tpContent.indexOfTab(FILM_PANEL), true);
        
        }
        tpContent.setEnabledAt(0, false);
    }

    public void showFilmPanel() {
        FilmPanel filmPanel = new FilmPanel();
        filmPanel.setVisible(true);
    }

    
    public void showAdminPanel() {
        AdminPanel adminPanel = new AdminPanel();
        adminPanel.setVisible(true);
    }

    private void disablePanels() {
    tpContent.setEnabledAt(tpContent.indexOfTab(FILM_PANEL), false);
    tpContent.setEnabledAt(tpContent.indexOfTab(PERSON_PANEL), false);
    tpContent.setEnabledAt(tpContent.indexOfTab(ADMIN_PANEL), false);
    }

    private void handleEditMenu() {
        
    Component selectedComponent = tpContent.getSelectedComponent();

    if (selectedComponent instanceof JScrollPane scrollPane) {
        Component view = scrollPane.getViewport().getView();
        if (view instanceof JTextArea textArea) {
            ActionMap actionMap = textArea.getActionMap();
        

        menuEdit.add(createMenuItem(
                actionMap.get(DefaultEditorKit.cutAction),
                "Cut",
                KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK))
        );

        menuEdit.add(createMenuItem(
                actionMap.get(DefaultEditorKit.copyAction),
                "Copy",
                KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK))
        );

        menuEdit.add(createMenuItem(
                actionMap.get(DefaultEditorKit.pasteAction),
                "Paste",
                KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK))
        );

        menuEdit.addSeparator();

        menuEdit.add(createMenuItem(
                actionMap.get(DefaultEditorKit.selectAllAction),
                "Select All",
                KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK))
        );

        
        JMenuItem miTimeDate = createMenuItem(
                null,
                "Time/Date",
                KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0)
        );
        miTimeDate.addActionListener(e -> {
        try {
            textArea.getDocument().insertString(
                    textArea.getCaretPosition(),
                    LocalDateTime.now().format(DateTimeFormatter.ofPattern(DATE_FORMAT)),
                    null);
        } catch (BadLocationException ex) {
            Logger.getLogger(FilmManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    });
        menuEdit.add(miTimeDate); 
        }
      }
    }

    private JMenuItem createMenuItem(Action action, String text, KeyStroke accelerator) {
        JMenuItem menuItem = new JMenuItem();
        menuItem.setAction(action);
        menuItem.setText(text);
        menuItem.setAccelerator(accelerator);
        return menuItem;    
    }

    private JScrollPane getScrollPaneFromSelectedTab() {
    int selectedIndex = tpContent.getSelectedIndex();  
    if (selectedIndex == -1) {
        return null;  
    }

    Component selectedComponent = tpContent.getComponentAt(selectedIndex);
    
    if (selectedComponent instanceof JScrollPane) {
        return (JScrollPane) selectedComponent;
    } else {
        return null;  
    }    }

    private void handleLookAndFeel() {
         ButtonGroup bgLookFeel = new ButtonGroup();
        Arrays.asList(UIManager.getInstalledLookAndFeels()).forEach(lf -> {
            JRadioButtonMenuItem mi = new JRadioButtonMenuItem(lf.getName());
            bgLookFeel.add(mi);
            menuView.add(mi);
            if ("Nimbus".equals(lf.getName())) {
                mi.setSelected(true);
            }
            mi.addActionListener(e -> {
                try {
                    UIManager.setLookAndFeel(lf.getClassName());
                    SwingUtilities.updateComponentTreeUI(FilmManager.this);
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(FilmManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        });
    }

    private void saveTextAreaContent(JTextArea textArea) {
    JFileChooser fileChooser = new JFileChooser();
    int userSelection = fileChooser.showSaveDialog(null);
    
    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();
        try (FileWriter fileWriter = new FileWriter(fileToSave)) {
            fileWriter.write(textArea.getText());
            System.out.println("File saved successfully: " + fileToSave.getAbsolutePath());
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error saving file: " + ex.getMessage());
        }
    } else {
        System.out.println("Save command canceled by user.");
    }    
    }

    private void saveTextAreaFromSelectedTab() {
    int selectedIndex = tpContent.getSelectedIndex();
    
    if (selectedIndex == -1) {
        System.out.println("No tab is currently selected.");
        return;
    }
    
    Component selectedComponent = tpContent.getComponentAt(selectedIndex);
    
    if (selectedComponent instanceof JScrollPane) {
        JScrollPane scrollPane = (JScrollPane) selectedComponent;
        JViewport viewport = scrollPane.getViewport();
        Component view = viewport.getView();
        
        if (view instanceof JTextArea) {
            JTextArea textArea = (JTextArea) view;
            saveTextAreaContent(textArea); 
        } else {
            System.out.println("No text area found in selected tab.");
        }
    } else {
        System.out.println("No scroll pane found in selected tab.");
    }    
    }
    
}
